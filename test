{{ 'example' if dev_environment | default(true) else 'example-prelive' }}


12:09:08  **************************************************
12:09:08  *                    Failures                    *
12:09:08  **************************************************
12:09:08  michael.pehlgrim@payone.com  lasse.wulff@payone.com
12:09:08  1) [CUSTOMER DATA SAVE FOR FUTURE:] [Save changes in a days] Change home page field value and save it
12:09:08    - Failed: No element found using locator: By(css selector, #saveWithTerminNow)
12:09:08  
12:09:08  2) [TERMINAL:] [Wirtschaftlich Berechtigte] Name field is mandatory
12:09:08    - Expected ' form-control form-control-sm ttext geldwaesche.GW_Vorname1' to match 'is-invalid'.
12:09:08  
12:09:08  3) [TERMINAL:] [Wirtschaftlich Berechtigte] Surname field is mandatory
12:09:08    - Expected ' form-control form-control-sm ttext geldwaesche.GW_GName1' to match 'is-invalid'.
12:09:08  
12:09:08  4) [TERMINAL:] [Wirtschaftlich Berechtigte] Street field is mandatory
12:09:08    - Expected ' form-control form-control-sm ttext geldwaesche.GW_Strasse1' to match 'is-invalid'.
12:09:08  
12:09:08  5) [TERMINAL:] [Wirtschaftlich Berechtigte] Post index field is mandatory
12:09:08    - Expected ' form-control form-control-sm ttext geldwaesche.GW_PLZ1' to match 'is-invalid'.
12:09:08  
12:09:08  Executed 25 of 25 specs (5 FAILED) in 5 mins 43 secs.
12:09:08  [09:09:05] I/launcher - 0 instance(s) of WebDriver still running
12:09:08  [09:09:05] I/launcher - firefox #01 failed 5 test(s)
12:09:08  [09:09:05] I/launcher - overall: 5 failed spec(s)
12:09:08  [09:09:05] E/launcher - Process exited with error code 1
12:09:08  5 tests failed.



                        // Initialize flags for first failure and suite-related failure
                        def firstFailureFound = false
                        def suiteFailures = false

                        // Split log into lines manually
                        def logLines = logOutput.split("\n")

                        // Iterate over each line to find failures
                        for (line in logLines) {
                            if (line.contains("Failures")) {
                                // Failures section has started
                                firstFailureFound = false
                                suiteFailures = false
                            }

                            if (line.contains("- Failed:") && !firstFailureFound) {
                                // First failure - fail the pipeline
                                echo "First failure detected: ${line}"
                                firstFailureFound = true
                                error "Pipeline failed due to the first test failure: ${line}"
                            }

                            if (line.contains("[TERMINAL:] [Wirtschaftlich Berechtigte]") && line.contains("- Failed:")) {
                                // Failures in the specific test suite - mark as unstable
                                suiteFailures = true
                            }
                        }

                        // If there are suite-related failures, mark the build as unstable
                        if (suiteFailures) {
                            echo "Suite-related failures detected, marking the build as unstable."
                            currentBuild.result = 'UNSTABLE'
                        }



13:13:49  **************************************************
13:13:49  *                    Failures                    *
13:13:49  **************************************************
13:13:49  
13:13:49  1) [CUSTOMER DATA SAVE FOR FUTURE:] [Save changes in a days] Change home page field value and save it
13:13:49    - Failed: No element found using locator: By(css selector, #saveWithTerminNow)
13:13:49  
13:13:49  2) [TERMINAL:] [Wirtschaftlich Berechtigte] Name field is mandatory
13:13:49    - Expected ' form-control form-control-sm ttext geldwaesche.GW_Vorname1' to match 'is-invalid'.
13:13:49  
13:13:49  3) [TERMINAL:] [Wirtschaftlich Berechtigte] Surname field is mandatory
13:13:49    - Expected ' form-control form-control-sm ttext geldwaesche.GW_GName1' to match 'is-invalid'.
13:13:49  
13:13:49  4) [TERMINAL:] [Wirtschaftlich Berechtigte] Street field is mandatory
13:13:49    - Expected ' form-control form-control-sm ttext geldwaesche.GW_Strasse1' to match 'is-invalid'.
13:13:49  
13:13:49  5) [TERMINAL:] [Wirtschaftlich Berechtigte] Post index field is mandatory
13:13:49    - Expected ' form-control form-control-sm ttext geldwaesche.GW_PLZ1' to match 'is-invalid'.
13:13:49  
13:13:49  Executed 25 of 25 specs (5 FAILED) in 5 mins 43 secs.
13:13:49  [10:13:05] I/launcher - 0 instance(s) of WebDriver still running
13:13:49  [10:13:05] I/launcher - firefox #01 failed 5 test(s)
13:13:49  [10:13:05] I/launcher - overall: 5 failed spec(s)
13:13:49  [10:13:05] E/launcher - Process exited with error code 1
13:13:49  5 tests failed.



                        // Initialize lists for suite-related and other failures
                        def suiteFailures = []
                        def otherFailures = []

                        // Parse the log line by line
                        logOutput.eachLine { line ->
                            if (line.contains("- Failed:") || line.contains("- Expected")) {
                                if (line.contains("[TERMINAL:] [Wirtschaftlich Berechtigte]")) {
                                    suiteFailures.add(line.trim())
                                } else {
                                    otherFailures.add(line.trim())
                                }
                            }
                        }

                        // Fail the pipeline for non-suite-related failures
                        if (!otherFailures.isEmpty()) {
                            echo "Non-suite failures detected:\n${otherFailures.join('\n')}"
                            error "Pipeline failed due to non-suite test failures."
                        }

                        // Mark build as unstable if there are suite-related failures
                        if (!suiteFailures.isEmpty()) {
                            echo "Suite-related failures detected:\n${suiteFailures.join('\n')}"
                            currentBuild.result = 'UNSTABLE'
                        }


expected to call java.lang.String.eachLine but wound up catching org.jenkinsci.plugins.workflow.cps.CpsClosure2.call; see: https://jenkins.io/redirect/pipeline-cps-method-mismatches/




                        def isSuiteFailure = false  // Flag to track if we're in a suite-related failure

                        // Define the regex to match suite-related failures
                        def suitePattern = ~/^\[[A-Z]+:\] \[[A-Za-z]+\]/  // Matches [TERMINAL:] [Wirtschaftlich Berechtigte]

                        // Process log lines safely with eachLine
                        logOutput.eachLine { line ->
                            echo "Processing line: ${line}"

                            // Check if the line matches the suite-related failure pattern
                            if (line ==~ suitePattern) {
                                isSuiteFailure = true  // Mark that the suite-related failure has started
                                suiteFailures.add(line.trim())  // Capture the suite failure header
                            } else if (isSuiteFailure && (line.contains("- Failed:") || line.contains("- Expected"))) {
                                // If we're in a suite-related failure, capture the next failure message
                                suiteFailures.add(line.trim())  // Add the detailed failure line
                                isSuiteFailure = false  // Reset the flag after capturing
                            } else if (line.contains("- Failed:") || line.contains("- Expected")) {
                                // If it's a non-suite-related failure, add it to other failures
                                otherFailures.add(line.trim())
                            }
                        }



                        def isContainerRunning = sh(
                            script: "docker ps --filter 'name=selenium' --filter 'status=running' -q",
                            returnStdout: true
                        ).trim()

                        if (isContainerRunning) {
                            echo "Container 'selenium' is already running. Stopping it..."
                            sh "docker stop selenium"
                            sh "docker rm selenium"
                        } else {
                            echo "No running 'selenium' container found. Proceeding with the tests."
                        }


                        def suitePattern = ~/^\[[A-Z]+:\] \[[A-Za-zäÄöÖüÜß ]+\]/  // Matches [TERMINAL:] [Wirtschaftlich Berechtigte]
def suitePattern = ~/^\[[A-Z\s]+\:\] \[[A-Za-zäÄöÖüÜß ]+\] [A-Za-z0-9 .:-]+/



# Install dependencies
RUN apt-get update && apt-get install -y \
    git \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Set up the working directory in the container
WORKDIR /app

# Copy the PHP project files into the container
COPY . /app

# Install PHP dependencies using Composer
RUN composer install --no-interaction --prefer-dist --optimize-autoloader

# Install PHP_CodeSniffer and PHPStan globally
RUN composer global require "squizlabs/php_codesniffer" "phpstan/phpstan"

# Add Composer global bin to the system PATH
ENV PATH="$PATH:/root/.composer/vendor/bin"

# Entry point to run tests with PHP_CodeSniffer and PHPStan
CMD ["sh", "-c", "phpcs && phpstan analyse"]
